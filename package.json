{
  "name": "humps",
  "version": "1.0.0",
  "description": "Underscore-to-camelCase converter (and vice versa) for strings and object keys in JavaScript.",
  "main": "humps.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/domchristie/humps.git"
  },
  "keywords": [
    "utils",
    "camel",
    "case",
    "underscore",
    "converter",
    "strings",
    "objects"
  ],
  "author": {
    "name": "Dom Christie"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "^2.2.5"
  },
  "bugs": {
    "url": "https://github.com/domchristie/humps/issues"
  },
  "homepage": "https://github.com/domchristie/humps",
  "gitHead": "4018268a3c827ee68cce1036bc02389fd0b8a178",
  "readme": "humps [![Build status](https://secure.travis-ci.org/domchristie/humps.png)](http://travis-ci.org/#!/domchristie/humps)\n=====\n\nUnderscore-to-camelCase converter (and vice versa) for strings and object keys in JavaScript.\n\nWhen converting object keys, it will walk the structure, converting any nested objects (or arrays of nested objects) along the way. Handy for converting JSON between JavaScript and Ruby/Rails APIs.\n\nTakes inspiration from [Ember Data](https://github.com/emberjs/data) and copies some utility functions from [Underscore.js](http://underscorejs.org/).\n\nUsage\n-----\n\n### Converting strings\n\n    humps.camelize('hello_world') // 'helloWorld'\n    humps.decamelize('fooBar') // 'foo_bar'\n    humps.decamelize('fooBarBaz', { separator: '-' }) // 'foo-bar-baz'\n\n### Converting object keys\n\n    var object = { attr_one: 'foo', attr_two: 'bar' }\n    humps.camelizeKeys(object); // { attrOne: 'foo', attrTwo: 'bar' }\n\nArrays of objects are also converted\n\n    var array = [{ attr_one: 'foo' }, { attr_one: 'bar' }]\n    humps.camelizeKeys(array); // [{ attrOne: 'foo' }, { attrOne: 'bar' }]\n\nAPI\n---\n\n### `humps.camelize(string)`\n\nRemoves any hypens, underscores, and whitespace characters, and uppercases the first character that follows.\n\n```javascript\nhumps.camelize('hello_world-foo bar') // 'helloWorldFooBar'\n```\n\n### `humps.pascalize(string)`\n\nSimilar to `humps.camelize(string)`, but also ensures that the first character is uppercase.\n\n```javascript\nhumps.pascalize('hello_world-foo bar') // 'HelloWorldFooBar'\n```\n\n### `humps.decamelize(string, options)`\n\nConverts camelCased string to an underscore-separated string.\n\n```javascript\nhumps.decamelize('helloWorldFooBar') // 'hello_world_foo_bar'\n```\n\nThe separator can be customized with the `separator` option.\n\n```javascript\nhumps.decamelize('helloWorldFooBar', { separator: '-' }) // 'hello-world-foo-bar'\n```\n\nBy default, `decamelize` will only split words on capital letters (not numbers as in humps pre v1.0). To customize this behaviour, use the `split` option. This should be a regular expression which, when passed into `String.prototype.split`, produces an array of words (by default the regular expression is: `/(?=[A-Z])/`). For example, to treat numbers as uppercase:\n\n```javascript\nhumps.decamelize('helloWorld1', { split: /(?=[A-Z0-9])/ }) // 'hello_world_1'\n```\n\n### `humps.depascalize(string, options)`\n\nSame as `humps.decamelize` above.\n\n### `humps.camelizeKeys(object)`\n\nConverts object keys to camelCase. It also converts arrays of objects.\n\n### `humps.pascalizeKeys(object)`\n\nConverts object keys to PascalCase. It also converts arrays of objects.\n\n### `humps.decamelizeKeys(object, options)`\n\nSeparates camelCased object keys with an underscore. It also converts arrays of objects. See `humps.decamelize` for details of options.\n\n### `humps.depascalizeKeys(object, options)`\n\nSee `humps.decamelizeKeys`.\n\nLicence\n-------\nhumps is copyright &copy; 2012+ [Dom Christie](http://domchristie.co.uk) and released under the MIT license.",
  "readmeFilename": "README.md",
  "_id": "humps@1.0.0",
  "_shasum": "11e5d70fbd3fd3b0745cf6f1abf7cbf91f867917",
  "_from": "chrism-dp/humps",
  "_resolved": "git://github.com/chrism-dp/humps.git#4018268a3c827ee68cce1036bc02389fd0b8a178"
}
